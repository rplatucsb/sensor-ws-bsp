<?xml version="1.0" encoding="UTF-8"?>
<model version="5.1.0" links="0">
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="Sensor" superclass="qpn::QActive">
   <statechart properties="0x01">
    <initial target="../1">
     <action brief="initial"/>
     <initial_glyph conn="10,10,5,0,28,4">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="sensor_loop">
     <entry brief="Start Loop"/>
     <tran trig="SAMPLE_ADC">
      <action brief="Sample ADC">bsp_adc_start_dma();</action>
      <tran_glyph conn="10,32,3,-1,22">
       <action box="0,-2,23,2"/>
      </tran_glyph>
     </tran>
     <tran trig="UPDATE_ADC">
      <action brief="Update ADC "/>
      <tran_glyph conn="10,26,3,-1,22">
       <action box="0,-2,23,3"/>
      </tran_glyph>
     </tran>
     <state_glyph node="10,14,36,25">
      <entry box="1,2,12,5"/>
     </state_glyph>
    </state>
    <state_diagram size="80,50"/>
   </statechart>
  </class>
  <operation name="Sensor_ctor" type="void" visibility="0x00" properties="0x00">
   <code>Sensor * const me = (Sensor * const) &amp;AO_Sensor;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Sensor_initial));</code>
  </operation>
 </package>
 <directory name=".">
  <file name="sensor.c">
   <text>#include &quot;qpn.h&quot;    /* QP-nano framework API */
#include &quot;bsp_ws.h&quot;    /* Board Support Package interface */
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt; /* for exit() */
Q_DEFINE_THIS_FILE

$declare${AOs::Sensor_ctor}
$declare${AOs::Sensor}

enum ADCSig{
    SAMPLE_ADC_SIG = Q_USER_SIG,
    UPDATE_ADC_SIG
};
static QEvt sensor_queueSto[10];
static Sensor l_sensor;
QActive * const AO_Sensor = &amp;l_sensor.super;

QActiveCB const Q_ROM QF_active[] = {
    { (QActive *)&amp;AO_Sensor,  sensor_queueSto,     Q_DIM(sensor_queueSto)     },
    { (QActive *)0,           (QEvt *)0,        0U                      }
};


int main(){
    QF_init(Q_DIM(QF_active));
    Sensor_ctor();
    /*QACTIVE_START(AO_Sensor,
              1U,
              sensor_queueSto, Q_DIM(sensor_queueSto),
              (void*)0, 0U,
              (QEvt *)0); */
    return QF_run();
}
$define${AOs::Sensor_ctor}
$define${AOs::Sensor}

</text>
  </file>
  <file name="qpn_conf.h">
   <text>/*****************************************************************************
* Product: QP-nano configuration for the Blinky example
* Last Updated for Version: 5.6.2
* Date of the Last Update:  2016-04-05
*
*                    Q u a n t u m     L e a P s
*                    ---------------------------
*                    innovating embedded systems
*
* Copyright (C) Quantum Leaps, LLC. All rights reserved.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* Alternatively, this program may be distributed and modified under the
* terms of Quantum Leaps commercial licenses, which expressly supersede
* the GNU General Public License and are specifically designed for
* licensees interested in retaining the proprietary status of their code.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program. If not, see &lt;www.gnu.org/licenses/&gt;.
*
* Contact information:
* &lt;www.state-machine.com/licensing&gt;
* &lt;info@state-machine.com&gt;
*****************************************************************************/
#ifndef QPN_CONF_H
#define QPN_CONF_H

#define Q_PARAM_SIZE            4U
#define QF_MAX_TICK_RATE        1U
#define QF_TIMEEVT_CTR_SIZE     2U
#define QF_TIMEEVT_PERIODIC

#endif  /* QPN_CONF_H */
</text>
  </file>
 </directory>
</model>
